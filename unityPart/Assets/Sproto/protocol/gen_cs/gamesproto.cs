// Generated by sprotodump. DO NOT EDIT!
// source: D:\Study\EndDesign\UnityPart\unityPart\Assets\Sproto\protocol\/game.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class battle {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private double _positionX; // tag 0
			public double positionX {
				get { return _positionX; }
				set { base.has_field.set_field (0, true); _positionX = value; }
			}
			public bool HasPositionX {
				get { return base.has_field.has_field (0); }
			}

			private double _positionY; // tag 1
			public double positionY {
				get { return _positionY; }
				set { base.has_field.set_field (1, true); _positionY = value; }
			}
			public bool HasPositionY {
				get { return base.has_field.has_field (1); }
			}

			private double _positionZ; // tag 2
			public double positionZ {
				get { return _positionZ; }
				set { base.has_field.set_field (2, true); _positionZ = value; }
			}
			public bool HasPositionZ {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.positionX = base.deserialize.read_double ();
						break;
					case 1:
						this.positionY = base.deserialize.read_double ();
						break;
					case 2:
						this.positionZ = base.deserialize.read_double ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_double (this.positionX, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_double (this.positionY, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_double (this.positionZ, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _code; // tag 0
			public Int64 code {
				get { return _code; }
				set { base.has_field.set_field (0, true); _code = value; }
			}
			public bool HasCode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.code = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.code, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class join {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _name; // tag 0
			public string name {
				get { return _name; }
				set { base.has_field.set_field (0, true); _name = value; }
			}
			public bool HasName {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.name = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.name, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _code; // tag 0
			public Int64 code {
				get { return _code; }
				set { base.has_field.set_field (0, true); _code = value; }
			}
			public bool HasCode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _statu; // tag 1
			public Int64 statu {
				get { return _statu; }
				set { base.has_field.set_field (1, true); _statu = value; }
			}
			public bool HasStatu {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _id; // tag 2
			public Int64 id {
				get { return _id; }
				set { base.has_field.set_field (2, true); _id = value; }
			}
			public bool HasId {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.code = base.deserialize.read_integer ();
						break;
					case 1:
						this.statu = base.deserialize.read_integer ();
						break;
					case 2:
						this.id = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.code, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.statu, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.id, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


}


public class Protocol : ProtocolBase {
	public static  Protocol Instance = new Protocol();
	private Protocol() {
		Protocol.SetProtocol<battle> (battle.Tag);
		Protocol.SetRequest<SprotoType.battle.request> (battle.Tag);
		Protocol.SetResponse<SprotoType.battle.response> (battle.Tag);

		Protocol.SetProtocol<heartbeat> (heartbeat.Tag);

		Protocol.SetProtocol<join> (join.Tag);
		Protocol.SetRequest<SprotoType.join.request> (join.Tag);
		Protocol.SetResponse<SprotoType.join.response> (join.Tag);

	}

	public class battle {
		public const int Tag = 2;
	}

	public class heartbeat {
		public const int Tag = 101;
	}

	public class join {
		public const int Tag = 1;
	}

}